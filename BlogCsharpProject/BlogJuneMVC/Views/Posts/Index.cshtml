@*@model IEnumerable<BlogJuneMVC.Models.Post>*@
@*Paging Implementation:*@

@model PagedList.IPagedList<BlogJuneMVC.Models.Post>
@using Microsoft.AspNet.Identity
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Index";
}

<h2>Index of Posts</h2>
<div class="container">
    <a href="@Url.Action("Create", "Posts")"><span class="btn btn-default">Create New Post</span></a>
</div>
@*<p>
    @Html.ActionLink("Create New", "Create")
</p>*@
<br />

<table height="407" width="1000" class="table">
    <tr height="37">
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Body)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Category)
        </th>
        <th>
            @Html.ActionLink("Date", "Index", new {sortBy = ViewBag.SortDateParameter })
            @*@Html.DisplayNameFor(model => model.FirstOrDefault().Date)*@
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Author)
        </th>
        <th>
            @Html.DisplayName("Actions")
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            <a href="../../Posts/Details/@item.Id">@BlogJuneMVC.Classes.Utils.CutText(item.Title, 33)</a>
            @*@BlogJuneMVC.Classes.Utils.CutText(item.Title, 33)*@
            @*@Html.DisplayFor(modelItem => item.Title)*@
        </td>
        <td>
           @BlogJuneMVC.Classes.Utils.CutText(item.Body, 70)
             @*@Html.DisplayFor(modelItem => item.Body)*@
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>
        <td>
            @item.Date.ToShortDateString()
            @*@Html.DisplayFor(modelItem => item.Date)*@
        </td>
        <td>
            @if (item.Author == null)
            { <i>No Author</i> }
            @Html.DisplayFor(modelItem => item.Author.UserName)
        </td>
      
        <td>
         
            @Html.ActionLink("Details", "Details", new { id=item.Id })
           
        </td> 

         @if (User.IsInRole("TrustedUser") && item.Author.UserName == User.Identity.GetUserName())
         {
           <td>
             @Html.ActionLink("Edit ", "Edit", new { id = item.Id }, new { @style = "color:brown;" })
             @Html.ActionLink(" Delete", "Delete", new { id = item.Id }, new { @style = "color:coral;" })
           </td>
         }
       @if (User.IsInRole("Administrators"))
       {
           <td>
               @Html.ActionLink("Edit ", "Edit", new { id = item.Id }, new { @style = "color:brown;" })
               @Html.ActionLink(" Delete", "Delete", new { id = item.Id }, new { @style = "color:coral;" })
               @*<span onclick="return confirm('Are you sure you want to delete this Role?')"><a href="/Roles/Delete?RoleName=@role.Name" class="delLink" style="color:burlywood;">Delete Role</a></span>*@
           </td>
       }
    </tr>
}

</table>

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortBy = Request["sortBy"] }))

 @*Explanations: sortBy = Request["sortBy"] - we have to pass the parameter sortBy so not to lose the sorting when going through pages*@

@*@if (User.IsInRole("Administrator") || item.Author != null && User.Identity.Name == item.Author.UserName)*@